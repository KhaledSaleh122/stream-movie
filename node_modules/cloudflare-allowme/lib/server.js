"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.start = exports.prepare = void 0;
const utils_1 = require("./utils");
const logger = require("anyhow");
const settings = require("./settings");
const cloudflare = __importStar(require("./cloudflare"));
const express = require("express");
const http_1 = __importDefault(require("http"));
let app;
let server;
let timer;
const failedIps = {};
const bannedIps = {};
const prepare = () => {
    app = express();
    app.disable("x-powered-by");
    if ((0, utils_1.getBoolean)(settings.server.trustProxy)) {
        app.set("trust proxy", true);
    }
    const authValidator = async (req, res, next) => {
        const ip = getClientIP(req);
        if (bannedIps[ip]) {
            logger.error("Server.authValidator", ip, `IP banned since ${bannedIps[ip].toLocaleString()}`);
            res.status(401).send("Access denied");
            return;
        }
        const authHeader = req.headers.authorization || "";
        const authToken = authHeader.includes(" ") ? authHeader.split(" ")[1] : "";
        if (authHeader.includes("Bearer")) {
            if (authToken !== settings.server.secret) {
                authFailed(req);
                res.status(401).send("Unauthorized");
                return;
            }
            next();
            return;
        }
        if (req.params.secret) {
            if (req.params.secret !== settings.server.secret) {
                authFailed(req);
                res.status(401).send("Unauthorized");
                return;
            }
            next();
            return;
        }
        if ((0, utils_1.getBoolean)(settings.server.prompt)) {
            const login = { user: settings.server.user, password: settings.server.secret };
            const [user, password] = Buffer.from(authToken, "base64").toString().split(":");
            if (user && password && user === login.user && password === login.password) {
                next();
                return;
            }
            res.set("WWW-Authenticate", 'Basic realm="allowme"');
        }
        authFailed(req);
        res.status(401).send("Authentication required");
    };
    app.get("/", async (req, res) => {
        logger.info("Server.home", getClientIP(req));
        if (settings.server.home.substring(0, 8) == "https://") {
            res.redirect(settings.server.home);
        }
        else {
            const html = `<html><head><title>AllowMe</title></head><body><center>${settings.server.home}</center></body></html>`;
            res.status(200).send(html);
        }
    });
    app.get("/allow", authValidator, async (req, res) => {
        const ip = getClientIP(req);
        const device = req.headers["x-device-name"] || (0, utils_1.getDevice)(req.headers["user-agent"]);
        try {
            const ok = await cloudflare.ipAllow(ip, device);
            res.status(200).send(`Add ${ip}: ${ok}`);
            delete failedIps[ip];
            delete bannedIps[ip];
        }
        catch (ex) {
            res.status(500).send(`Failed to add: ${ip}`);
        }
    });
    app.get("/block", authValidator, async (req, res) => {
        const ip = getClientIP(req);
        const device = req.headers["x-device-name"] || (0, utils_1.getDevice)(req.headers["user-agent"]);
        try {
            const ok = await cloudflare.ipBlock(ip, device);
            res.status(200).send(`Remove ${ip}: ${ok}`);
        }
        catch (ex) {
            res.status(500).send(`Failed to remove: ${ip}`);
        }
    });
    app.get("/banned", authValidator, async (req, res) => {
        const ip = getClientIP(req);
        try {
            res.status(200).send(JSON.stringify(bannedIps, null, 2));
        }
        catch (ex) {
            res.status(500).send(`Failed to list banned IPs, from ${ip}`);
        }
    });
};
exports.prepare = prepare;
const start = () => {
    if (server) {
        logger.warn("Server.start", "Already running");
        return;
    }
    try {
        server = http_1.default.createServer(app);
        const logConfig = [];
        const listenOk = () => logger.info("Server.start", `Listening on port ${settings.server.port}`);
        const listenError = (err) => logger.error("Server.error", err);
        server.listen(parseInt(settings.server.port), listenOk).on("error", listenError);
        if (parseInt(settings.ip.maxAge) > 0) {
            cloudflare.cleanup();
            timer = setInterval(cloudflare.cleanup, 1000 * 60 * 60);
            logConfig.push(`IP max age: ${settings.ip.maxAge}m`);
        }
        else {
            logConfig.push(`IP max age disabled`);
        }
        if (parseInt(settings.ip.blockInterval) > 0) {
            logConfig.push(`IP block: ${settings.ip.blockInterval}m after ${settings.ip.denyCount} failed auths`);
        }
        else {
            logConfig.push(`IP block disabled`);
        }
        const authCleanup = () => {
            const minDate = new Date().valueOf() - parseInt(settings.ip.blockInterval) * 1000 * 60;
            const entries = Object.entries(bannedIps);
            for (let [ip, blockDate] of entries) {
                if (blockDate.valueOf() < minDate) {
                    logger.warn("Server.authCleanup", ip, "Unblocked");
                    delete bannedIps[ip];
                }
            }
        };
        logger.info("Server.start", logConfig.join(" | "));
        setInterval(authCleanup, 1000 * 60 * 5);
    }
    catch (ex) {
        logger.error("Server.start", ex);
    }
};
exports.start = start;
const stop = () => {
    if (!server) {
        logger.warn("Server.stop", "Server was not running");
        return;
    }
    try {
        server.close();
        server = null;
        clearInterval(timer);
        timer = null;
        logger.info("Server.stop", "Stopped");
    }
    catch (ex) {
        logger.error("Server.stop", ex);
    }
};
exports.stop = stop;
const getClientIP = (req) => {
    if (!(0, utils_1.getBoolean)(settings.server.trustProxy)) {
        return req.ip;
    }
    return (req.headers["cf-connecting-ip"] || req.headers["true-client-ip"] || req.ip).toString();
};
const authFailed = (req) => {
    const device = req.headers["x-device-name"] || (0, utils_1.getDevice)(req.headers["user-agent"]);
    const ip = getClientIP(req);
    if (!failedIps[ip]) {
        failedIps[ip] = 1;
    }
    else {
        failedIps[ip]++;
    }
    if (parseInt(settings.ip.blockInterval) > 0 && failedIps[ip] >= 5) {
        failedIps[ip];
        bannedIps[ip] = new Date();
        logger.warn("Server.authFailed", ip, device, "IP banned");
    }
    else {
        logger.warn("Server.authFailed", ip, device, `Count ${failedIps[ip]}`);
    }
};
