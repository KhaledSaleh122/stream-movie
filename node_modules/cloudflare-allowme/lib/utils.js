"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseIP = exports.getDevice = exports.getBoolean = void 0;
const logger = require("anyhow");
const uaParser = require("ua-parser-js");
const getBoolean = (value) => {
    switch (value) {
        case "false":
        case "off":
        case "no":
        case "0":
        case "":
            return false;
        default:
            return true;
    }
};
exports.getBoolean = getBoolean;
const getDevice = (useragent) => {
    const ua = uaParser(useragent);
    const result = [];
    if (ua.device && ua.device.vendor)
        result.push(ua.device.vendor);
    if (ua.device && ua.device.model)
        result.push(ua.device.model);
    if (ua.os && ua.os.name && result.length == 0)
        result.push(ua.os.name);
    if (ua.browser && ua.browser.name)
        result.push(ua.browser.name);
    if (result.length == 0)
        result.push(useragent.split[" "][0]);
    return result.join(" ");
};
exports.getDevice = getDevice;
const parseIP = (ip) => {
    try {
        if (!ip || ip == "::1" || ip == "127.0.0.1") {
            return null;
        }
        if (ip.includes(":")) {
            const ipv6 = ip.split(":");
            if (ipv6.length > 4) {
                for (let i = 0; i < 4; i++) {
                    if (ipv6[i] == "")
                        ipv6[i] = "0";
                }
                return `${ipv6.slice(0, 4).join(":")}::/64`;
            }
        }
        return ip;
    }
    catch (ex) {
        logger.error("Utils.parseIP", ip, ex);
        return null;
    }
};
exports.parseIP = parseIP;
