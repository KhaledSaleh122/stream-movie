"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("anyhow");
const settings = require("./settings");
if (settings.log.level == "none") {
    logger.setup("none");
}
else {
    logger.setup("console");
    logger.setOptions({ levelOnConsole: true, preprocessors: ["friendlyErrors"] });
    if (settings.log.level == "error") {
        logger.setOptions({ levels: ["warn", "error"] });
    }
}
const cloudflare = __importStar(require("./cloudflare"));
const server = __importStar(require("./server"));
const run = async () => {
    try {
        logger.info("Index.run", "Starting the service");
        if (!settings.cloudflare.token)
            throw new Error("Missing Cloudflare token ($ALLOWME_CF_TOKEN)");
        if (!settings.cloudflare.zone)
            throw new Error("Missing Cloudflare zone ($ALLOWME_CF_ZONE)");
        if (!settings.server.secret)
            throw new Error("Missing server token ($ALLOWME_SERVER_SECRET)");
        if (settings.server.port == "")
            settings.server.port = "8080";
        if (settings.server.user == "")
            settings.server.user = "allowme";
        if (settings.server.prompt == "")
            settings.server.prompt = "true";
        if (settings.server.home == "")
            settings.server.home = "https://devv.com";
        if (settings.server.trustProxy == "")
            settings.server.trustProxy = "true";
        if (settings.ip.maxAge == "")
            settings.ip.maxAge = "1440";
        if (settings.ip.blockInterval == "")
            settings.ip.blockInterval = "60";
        if (settings.ip.denyCount == "")
            settings.ip.denyCount = "5";
        if (!settings.cloudflare.accountId) {
            settings.cloudflare.accountId = await cloudflare.getAccountId();
            if (!settings.cloudflare.accountId)
                throw new Error("Failed to get the Cloudflare account ID");
        }
        settings.cloudflare.zoneId = await cloudflare.getZoneId();
        if (!settings.cloudflare.zoneId)
            throw new Error("Failed to get the Cloudflare zone ID");
        if (!settings.cloudflare.listId) {
            settings.cloudflare.listId = await cloudflare.getListId();
            if (!settings.cloudflare.listId)
                throw new Error("Failed to get the Cloudflare list ID");
            settings.cloudflare.listName = await cloudflare.getListName();
            if (!settings.cloudflare.listName)
                throw new Error("Failed to get the Cloudflare list name");
            settings.cloudflare.firewallId = await cloudflare.getFirewallId();
            if (!settings.cloudflare.firewallId)
                throw new Error("Failed to get the Cloudflare firewall rule ID");
        }
        server.prepare();
        server.start();
    }
    catch (ex) {
        logger.error("Index.run", ex);
    }
};
run();
