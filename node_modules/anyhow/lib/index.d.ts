import { AnyhowOptions, Logger } from "./types";
/**
 * This is the main class of the Anyhow library.
 * @example const logger = require("anyhow")
 */
declare class Anyhow {
    private static _instance;
    /** @hidden */
    static get Instance(): Anyhow;
    /**
     * Init with default options.
     */
    constructor();
    /**
     * Internal object defining a Logger.
     */
    private _logger;
    /**
     * Getter for _lib, to be used by external modules.
     */
    get logger(): Logger;
    /**
     * For compatibility only, now returns the logger's name.
     */
    get lib(): string;
    /**
     * Helper to check if [[setup]] was already called and logger is ready to log.
     */
    get isReady(): boolean;
    /**
     * Library options (internal).
     */
    private _options;
    /**
     * Get library options.
     */
    get options(): AnyhowOptions;
    /**
     * Set library options.
     */
    set options(value: AnyhowOptions);
    /**
     * Function to catch and log uncaught exceptions, set by [[uncaughtExceptions]].
     */
    private _uncaughtExceptionHandler;
    /**
     * Enable or disable the uncaught exception handler.
     */
    private set uncaughtExceptions(value);
    /**
     * Function to catch and log unhandled rejections, set by [[unhandledRejections]].
     */
    private _unhandledRejectionHandler;
    /**
     * Enable or disable the unhandled rejection handler.
     */
    private set unhandledRejections(value);
    /**
     * Auto-generated list of messages that should not be logged.
     */
    private ignoreMessages;
    /**
     * Please use options.appName.
     * @deprecated
     */
    set appName(value: string);
    /**
     * Please use options.compact.
     * @deprecated
     */
    set compact(value: boolean);
    /**
     * Please use options.preprocessorOptions.errorStack.
     * @deprecated
     */
    set errorStack(value: boolean);
    /**
     * Please use options.levels.
     * @deprecated
     */
    set levels(value: string[]);
    /**
     * Please use options.separator.
     * @deprecated
     */
    set separator(value: string);
    /**
     * Please use options.timestamp.
     * @deprecated
     */
    set timestamp(value: boolean);
    /**
     * Please use options.preprocessors.
     * @deprecated
     */
    set preprocessor(value: Function);
    /**
     * Please use options.styles.
     * @deprecated
     */
    set styles(value: any);
    /**
     * Default logging method.
     * @param level String representing the level: error, warn, info, verbose, debug, silly
     * @param args Array of arguments to be logged.
     * @returns The generated message that was just logged.
     */
    log(level: string, args: any | any[]): string;
    /**
     * Shortcut to [[log]]("debug", args).
     */
    debug: (...args: any[]) => string;
    /**
     * Shortcut to [[log]]("info", args).
     */
    info: (...args: any[]) => string;
    /**
     * Shortcut to [[log]]("warn", args).
     */
    warn: (...args: any[]) => string;
    /**
     * Shortcut to [[log]]("error", args).
     */
    error: (...args: any[]) => string;
    /**
     * Shortcut to [[log]]("warn", args), with a deprecation notice.
     * Will not log if the noDeprecation flag is set.
     */
    deprecated: (...args: any[]) => string;
    /**
     * Shortcut to [[log]]("debug", args) with object inspection instead of plain text.
     */
    inspect: (...args: any[]) => string;
    /**
     * Log directly to the console. This is the default logger handler
     * in case no other compatible libraries are found.
     * @param level String representing the level: error, warn, info, debug
     * @param args Array of arguments to be logged.
     * @returns The generated message that was just logged.
     */
    console: (level: string, args: any) => string;
    /**
     * Setup will try to load compatible loggers, and fall back to the console
     * if nothing was found. Will try using libraries on this order:
     * winston, bunyan, pino, gcloud, console.
     * @param lib Optional, force a specific library or Logger to be used, defaults to console.
     * @param libOptions Additional options to be passed to the underlying logging library.
     */
    setup: (lib?: "winston" | "bunyan" | "pino" | "gcloud" | "console" | "none" | Logger, libOptions?: any) => void;
    /**
     * Helper to set partial library options. Only the passed parameters will be updated.
     * @param options Options to be updated.
     */
    setOptions: (options: AnyhowOptions) => void;
    /**
     * Apply a new options object to the library.
     * @param newOptions New options object to be applied.
     */
    private applyOptions;
}
declare const _default: Anyhow;
export = _default;
