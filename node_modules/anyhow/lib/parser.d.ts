import { AnyhowOptions, PreProcessor } from "./types";
/**
 * Parser methods to build a message out of passed logging arguments.
 */
declare class AnyhowParser {
    private static _instance;
    /** @hidden */
    static get Instance(): AnyhowParser;
    /**
     * Library options (internal).
     */
    private _options;
    /**
     * Get library options.
     */
    get options(): AnyhowOptions;
    /**
     * Set library options.
     */
    set options(value: AnyhowOptions);
    /**
     * Is the "debug" level active?
     */
    private _isDebug;
    /**
     * Is the "debug" level active?
     */
    get isDebug(): boolean;
    /**
     * List of active built-in preprocessors.
     */
    private builtinPreProcessors;
    /**
     * List of active custom preprocessors.
     */
    private customPreProcessors;
    /**
     * Used by [[getMessage]] to parse and return the individual log strings
     * out of the passed arguments. Might run recursively.
     * @param args Array of arguments to be parsed.
     */
    private argumentsParser;
    /**
     * Gets a nice, readable message out of the passed arguments, which can be of any type.
     * @param args Objects or variables that should be stringified.
     * @param ignoredPreProcessors List of ignored preprocessors.
     * @returns Human readable string taken out of the parsed arguments.
     */
    getMessage: (args: any[], ignoredPreProcessors?: PreProcessor[]) => string;
    /**
     * Gets a nice, readable JSON representation of the passed arguments.
     * @param args Objects or variables that should be stringified.
     */
    getInspection: (args: any) => string;
}
declare const _default: AnyhowParser;
export = _default;
