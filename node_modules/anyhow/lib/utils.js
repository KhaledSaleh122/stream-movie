"use strict";
// Anyhow: Utils (largely based on lodash.js)
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeDeep = exports.isString = exports.isPlainObject = exports.isObject = exports.isNil = exports.isFunction = exports.isError = exports.isDate = exports.isArray = exports.isArguments = exports.getTimestamp = exports.getTag = exports.flattenArray = exports.dedupArray = exports.cloneDeep = void 0;
/**
 * Clone the passed object and return a new one.
 * @param obj The object to be cloned.
 * @param logErrors Log cloning failures? Defaults to false.
 * @param maxDepth Maximum depth to reach.
 * @param depth Current depth.
 */
const cloneDeep = (obj, logErrors, maxDepth, depth) => {
    if (!obj)
        return obj;
    if (!maxDepth)
        maxDepth = 5;
    if (!depth)
        depth = 0;
    let result;
    try {
        if ((0, exports.isArray)(obj)) {
            if (depth == maxDepth) {
                result = `[${obj.length}]`;
            }
            else {
                result = [];
                obj.forEach((element) => result.push((0, exports.cloneDeep)(element, logErrors, maxDepth, depth + 1)));
            }
        }
        else if (obj instanceof Object && !(obj instanceof Function)) {
            if (depth == maxDepth) {
                result = obj.toString();
            }
            else {
                try {
                    result = Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);
                    if ((0, exports.isError)(obj)) {
                        result.stack = obj.stack;
                    }
                }
                catch (innerEx) {
                    if (logErrors) {
                        console.warn("Utils.cloneDeep: Failed to clone constructor");
                        console.error(innerEx);
                    }
                }
                if (!result) {
                    result = {};
                    for (let key in obj) {
                        if (key)
                            result[key] = (0, exports.cloneDeep)(obj[key], logErrors, maxDepth, depth + 1);
                    }
                }
            }
        }
        else {
            result = obj;
        }
    }
    catch (ex) {
        if (logErrors) {
            console.warn("Utils.cloneDeep: Failed to clone object");
            console.error(ex);
        }
    }
    return result;
};
exports.cloneDeep = cloneDeep;
/**
 * Returns a deduplicated array.
 * @param arr Array to be deduplicated (immutable).
 */
const dedupArray = (arr) => {
    if (!arr || arr.length == 0)
        return arr;
    return arr.filter((item, index, self) => self.indexOf(item) == index);
};
exports.dedupArray = dedupArray;
/**
 * Flatten the passed array.
 * @param value Object or value.
 */
const flattenArray = (array, depth, result) => {
    const length = array == null ? 0 : array.length;
    if (!length)
        return [];
    if ((0, exports.isNil)(depth))
        depth = 1 / 0;
    if ((0, exports.isNil)(result))
        result = [];
    const predicate = (value) => Array.isArray(value) || (0, exports.isArguments)(value) || !!(value && value[Symbol.isConcatSpreadable]);
    if (array == null) {
        return result;
    }
    for (const value of array) {
        if (depth > 0 && predicate(value)) {
            if (depth > 1) {
                (0, exports.flattenArray)(value, depth - 1, result);
            }
            else {
                result.push(...value);
            }
        }
        else {
            result[result.length] = value;
        }
    }
    return result;
};
exports.flattenArray = flattenArray;
/**
 * Get the passed object's tag.
 * @param value Object or value.
 */
const getTag = (value) => {
    const toString = Object.prototype.toString;
    if (value === null) {
        return "[object Null]";
    }
    if (value === undefined) {
        return "[object Undefined]";
    }
    if (value && value.constructor && value.constructor.name) {
        return `[object ${value.constructor.name}]`;
    }
    return toString.call(value);
};
exports.getTag = getTag;
/**
 * Get the current timestamp.
 */
const getTimestamp = () => {
    const padLeft = (v) => {
        return v < 10 ? "0" + v.toString() : v.toString();
    };
    // Get date elements.
    const now = new Date();
    let year = now.getUTCFullYear().toString();
    let month = now.getUTCMonth() + 1;
    let day = now.getUTCDate();
    let hour = now.getUTCHours();
    let minute = now.getUTCMinutes();
    let second = now.getUTCSeconds();
    return `${padLeft(year.substring(2))}-${padLeft(month)}-${padLeft(day)} ${padLeft(hour)}:${padLeft(minute)}:${padLeft(second)}`;
};
exports.getTimestamp = getTimestamp;
/**
 * Check if the passed value is same as args.
 * @param value Object or value.
 */
const isArguments = (value) => {
    return (0, exports.isObject)(value) && (0, exports.getTag)(value) == "[object Arguments]";
};
exports.isArguments = isArguments;
/**
 * Check if the passed value is an array.
 * @param value Object or value.
 */
const isArray = (value) => {
    return value && Array.isArray(value);
};
exports.isArray = isArray;
/**
 * Check if the passed value is a date.
 * @param value Object or value.
 */
const isDate = (value) => {
    return value ? value instanceof Date : false;
};
exports.isDate = isDate;
/**
 * Check if the passed value is an error.
 * @param value Object or value.
 */
const isError = (value) => {
    if (!(0, exports.isObject)(value)) {
        return false;
    }
    const tag = (0, exports.getTag)(value);
    return tag == "[object Error]" || tag == "[object DOMException]" || (typeof value.message === "string" && typeof value.name === "string" && !(0, exports.isPlainObject)(value));
};
exports.isError = isError;
/**
 * Check if the passed value is a string.
 * @param value Object or value.
 */
const isFunction = (value) => {
    return typeof value === "function";
};
exports.isFunction = isFunction;
/**
 * Check if the passed value is null or undefined.
 * @param value Object or value.
 */
const isNil = (value) => {
    return value === null || typeof value == "undefined";
};
exports.isNil = isNil;
/**
 * Check if the passed value is an object.
 * @param value Object or value.
 */
const isObject = (value) => {
    return typeof value === "object" && value !== null;
};
exports.isObject = isObject;
/**
 * Check if the passed value is a plain object.
 * @param value Object or value.
 */
const isPlainObject = (value) => {
    if (!(0, exports.isObject)(value) || (0, exports.getTag)(value) != "[object Object]") {
        return false;
    }
    if (Object.getPrototypeOf(value) === null) {
        return true;
    }
    let proto = value;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(value) === proto;
};
exports.isPlainObject = isPlainObject;
/**
 * Check if the passed value is a string.
 * @param value Object or value.
 */
const isString = (value) => {
    const type = typeof value;
    return type === "string" || (type === "object" && value != null && !Array.isArray(value) && (0, exports.getTag)(value) == "[object String]");
};
exports.isString = isString;
/**
 * Merge the passed / immutable objects into one, and return the result.
 * @param obj The object to be cloned.
 */
const mergeDeep = (...objects) => {
    if (!objects)
        return objects;
    let mergeArrays = false;
    if (objects[objects.length - 1] === true) {
        mergeArrays = true;
        objects.pop();
    }
    return objects.reduce((prev, obj) => {
        Object.keys(obj).forEach((key) => {
            const previous = prev[key];
            const current = obj[key];
            if ((0, exports.isArray)(previous) && (0, exports.isArray)(current)) {
                prev[key] = mergeArrays ? previous.concat(...current) : current;
            }
            else if ((0, exports.isObject)(previous) && (0, exports.isObject)(current)) {
                prev[key] = (0, exports.mergeDeep)(previous, current);
            }
            else {
                prev[key] = current;
            }
        });
        return prev;
    }, {});
};
exports.mergeDeep = mergeDeep;
