/**
 * Clone the passed object and return a new one.
 * @param obj The object to be cloned.
 * @param logErrors Log cloning failures? Defaults to false.
 * @param maxDepth Maximum depth to reach.
 * @param depth Current depth.
 */
export declare const cloneDeep: (obj: any, logErrors?: boolean, maxDepth?: number, depth?: number) => any;
/**
 * Returns a deduplicated array.
 * @param arr Array to be deduplicated (immutable).
 */
export declare const dedupArray: (arr: any[]) => any[];
/**
 * Flatten the passed array.
 * @param value Object or value.
 */
export declare const flattenArray: (array: any, depth?: any, result?: any) => any[];
/**
 * Get the passed object's tag.
 * @param value Object or value.
 */
export declare const getTag: (value: any) => any;
/**
 * Get the current timestamp.
 */
export declare const getTimestamp: () => string;
/**
 * Check if the passed value is same as args.
 * @param value Object or value.
 */
export declare const isArguments: (value: any) => boolean;
/**
 * Check if the passed value is an array.
 * @param value Object or value.
 */
export declare const isArray: (value: any) => boolean;
/**
 * Check if the passed value is a date.
 * @param value Object or value.
 */
export declare const isDate: (value: any) => boolean;
/**
 * Check if the passed value is an error.
 * @param value Object or value.
 */
export declare const isError: (value: any) => boolean;
/**
 * Check if the passed value is a string.
 * @param value Object or value.
 */
export declare const isFunction: (value: any) => boolean;
/**
 * Check if the passed value is null or undefined.
 * @param value Object or value.
 */
export declare const isNil: (value: any) => boolean;
/**
 * Check if the passed value is an object.
 * @param value Object or value.
 */
export declare const isObject: (value: any) => boolean;
/**
 * Check if the passed value is a plain object.
 * @param value Object or value.
 */
export declare const isPlainObject: (value: any) => boolean;
/**
 * Check if the passed value is a string.
 * @param value Object or value.
 */
export declare const isString: (value: any) => boolean;
/**
 * Merge the passed / immutable objects into one, and return the result.
 * @param obj The object to be cloned.
 */
export declare const mergeDeep: (...objects: any[]) => any;
