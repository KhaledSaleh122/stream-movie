import { AnyhowOptions, PreProcessor } from "./types";
/**
 * Parser methods to build a message out of passed logging arguments.
 */
declare class AnyhowPreProcessors {
    private static _instance;
    /** @hidden */
    static get Instance(): AnyhowPreProcessors;
    /**
     * Execute the passed preprocessors.
     * @param options Library options.
     * @param args Arguments to be processed.
     * @param preprocessors List of preprocessors to be executed.
     */
    run: (options: AnyhowOptions, args: any[], preprocessors: PreProcessor[]) => any[];
    /**
     * Cleanup logged parameters (arrays).
     * @param options Library options.
     * @param args Array to be processed.
     * @param depth Current depth on the array tree.
     */
    private cleanupArray;
    /**
     * Cleanup logged parameters (objects).
     * @param options Library options.
     * @param obj Object to be processed.
     * @param depth Current depth on the objects tree.
     */
    private cleanupObject;
    /**
     * Extract relevant details from known exceptions.
     * @param options Library options.
     * @param args Arguments to be processed.
     */
    private friendlyErrors;
    /**
     * Mask secrets (arrays).
     * @param options Library options.
     * @param args Array to be processed.
     * @param depth Current depth on the array tree.
     */
    private maskSecretsArray;
    /**
     * Mask secrets (objects).
     * @param options Library options.
     * @param obj Object to be processed.
     * @param depth Current depth on the objects tree.
     */
    private maskSecretsObject;
}
declare const _default: AnyhowPreProcessors;
export = _default;
